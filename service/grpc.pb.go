// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: grpc.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RiskServer struct {
	BrokerId   string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	ServerAddr string `protobuf:"bytes,2,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	ServerPort int32  `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
}

func (m *RiskServer) Reset()      { *m = RiskServer{} }
func (*RiskServer) ProtoMessage() {}
func (*RiskServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}
func (m *RiskServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RiskServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RiskServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RiskServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskServer.Merge(m, src)
}
func (m *RiskServer) XXX_Size() int {
	return m.Size()
}
func (m *RiskServer) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskServer.DiscardUnknown(m)
}

var xxx_messageInfo_RiskServer proto.InternalMessageInfo

func (m *RiskServer) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *RiskServer) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *RiskServer) GetServerPort() int32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

type InvestorList struct {
	Data []*Investor `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *InvestorList) Reset()      { *m = InvestorList{} }
func (*InvestorList) ProtoMessage() {}
func (*InvestorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}
func (m *InvestorList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvestorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvestorList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvestorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvestorList.Merge(m, src)
}
func (m *InvestorList) XXX_Size() int {
	return m.Size()
}
func (m *InvestorList) XXX_DiscardUnknown() {
	xxx_messageInfo_InvestorList.DiscardUnknown(m)
}

var xxx_messageInfo_InvestorList proto.InternalMessageInfo

func (m *InvestorList) GetData() []*Investor {
	if m != nil {
		return m.Data
	}
	return nil
}

type AccountList struct {
	Data []*Account `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *AccountList) Reset()      { *m = AccountList{} }
func (*AccountList) ProtoMessage() {}
func (*AccountList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{2}
}
func (m *AccountList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountList.Merge(m, src)
}
func (m *AccountList) XXX_Size() int {
	return m.Size()
}
func (m *AccountList) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountList.DiscardUnknown(m)
}

var xxx_messageInfo_AccountList proto.InternalMessageInfo

func (m *AccountList) GetData() []*Account {
	if m != nil {
		return m.Data
	}
	return nil
}

type PositionList struct {
	Data []*Position `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *PositionList) Reset()      { *m = PositionList{} }
func (*PositionList) ProtoMessage() {}
func (*PositionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{3}
}
func (m *PositionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionList.Merge(m, src)
}
func (m *PositionList) XXX_Size() int {
	return m.Size()
}
func (m *PositionList) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionList.DiscardUnknown(m)
}

var xxx_messageInfo_PositionList proto.InternalMessageInfo

func (m *PositionList) GetData() []*Position {
	if m != nil {
		return m.Data
	}
	return nil
}

type Result struct {
	ReqId   int32    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	RspInfo *RspInfo `protobuf:"bytes,2,opt,name=rsp_info,json=rspInfo,proto3" json:"rsp_info,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*Result_ApiIdentity
	//	*Result_UserLogin
	//	*Result_UserLogout
	//	*Result_Investors
	//	*Result_Accounts
	//	*Result_Positions
	Response isResult_Response `protobuf_oneof:"response"`
}

func (m *Result) Reset()      { *m = Result{} }
func (*Result) ProtoMessage() {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{4}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type isResult_Response interface {
	isResult_Response()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Result_ApiIdentity struct {
	ApiIdentity string `protobuf:"bytes,10,opt,name=api_identity,json=apiIdentity,proto3,oneof" json:"api_identity,omitempty"`
}
type Result_UserLogin struct {
	UserLogin *RspUserLogin `protobuf:"bytes,11,opt,name=user_login,json=userLogin,proto3,oneof" json:"user_login,omitempty"`
}
type Result_UserLogout struct {
	UserLogout *RspUserLogout `protobuf:"bytes,12,opt,name=user_logout,json=userLogout,proto3,oneof" json:"user_logout,omitempty"`
}
type Result_Investors struct {
	Investors *InvestorList `protobuf:"bytes,13,opt,name=investors,proto3,oneof" json:"investors,omitempty"`
}
type Result_Accounts struct {
	Accounts *AccountList `protobuf:"bytes,14,opt,name=accounts,proto3,oneof" json:"accounts,omitempty"`
}
type Result_Positions struct {
	Positions *PositionList `protobuf:"bytes,15,opt,name=positions,proto3,oneof" json:"positions,omitempty"`
}

func (*Result_ApiIdentity) isResult_Response() {}
func (*Result_UserLogin) isResult_Response()   {}
func (*Result_UserLogout) isResult_Response()  {}
func (*Result_Investors) isResult_Response()   {}
func (*Result_Accounts) isResult_Response()    {}
func (*Result_Positions) isResult_Response()   {}

func (m *Result) GetResponse() isResult_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Result) GetReqId() int32 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *Result) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

func (m *Result) GetApiIdentity() string {
	if x, ok := m.GetResponse().(*Result_ApiIdentity); ok {
		return x.ApiIdentity
	}
	return ""
}

func (m *Result) GetUserLogin() *RspUserLogin {
	if x, ok := m.GetResponse().(*Result_UserLogin); ok {
		return x.UserLogin
	}
	return nil
}

func (m *Result) GetUserLogout() *RspUserLogout {
	if x, ok := m.GetResponse().(*Result_UserLogout); ok {
		return x.UserLogout
	}
	return nil
}

func (m *Result) GetInvestors() *InvestorList {
	if x, ok := m.GetResponse().(*Result_Investors); ok {
		return x.Investors
	}
	return nil
}

func (m *Result) GetAccounts() *AccountList {
	if x, ok := m.GetResponse().(*Result_Accounts); ok {
		return x.Accounts
	}
	return nil
}

func (m *Result) GetPositions() *PositionList {
	if x, ok := m.GetResponse().(*Result_Positions); ok {
		return x.Positions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Result) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Result_ApiIdentity)(nil),
		(*Result_UserLogin)(nil),
		(*Result_UserLogout)(nil),
		(*Result_Investors)(nil),
		(*Result_Accounts)(nil),
		(*Result_Positions)(nil),
	}
}

type Request struct {
	ApiIdentity string `protobuf:"bytes,1,opt,name=api_identity,json=apiIdentity,proto3" json:"api_identity,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*Request_Front
	//	*Request_Login
	//	*Request_Investor
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{5}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type isRequest_Request interface {
	isRequest_Request()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_Front struct {
	Front *RiskServer `protobuf:"bytes,11,opt,name=front,proto3,oneof" json:"front,omitempty"`
}
type Request_Login struct {
	Login *RiskUser `protobuf:"bytes,12,opt,name=login,proto3,oneof" json:"login,omitempty"`
}
type Request_Investor struct {
	Investor *Investor `protobuf:"bytes,13,opt,name=investor,proto3,oneof" json:"investor,omitempty"`
}

func (*Request_Front) isRequest_Request()    {}
func (*Request_Login) isRequest_Request()    {}
func (*Request_Investor) isRequest_Request() {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetApiIdentity() string {
	if m != nil {
		return m.ApiIdentity
	}
	return ""
}

func (m *Request) GetFront() *RiskServer {
	if x, ok := m.GetRequest().(*Request_Front); ok {
		return x.Front
	}
	return nil
}

func (m *Request) GetLogin() *RiskUser {
	if x, ok := m.GetRequest().(*Request_Login); ok {
		return x.Login
	}
	return nil
}

func (m *Request) GetInvestor() *Investor {
	if x, ok := m.GetRequest().(*Request_Investor); ok {
		return x.Investor
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Request) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Request_Front)(nil),
		(*Request_Login)(nil),
		(*Request_Investor)(nil),
	}
}

func init() {
	proto.RegisterType((*RiskServer)(nil), "service.RiskServer")
	proto.RegisterType((*InvestorList)(nil), "service.InvestorList")
	proto.RegisterType((*AccountList)(nil), "service.AccountList")
	proto.RegisterType((*PositionList)(nil), "service.PositionList")
	proto.RegisterType((*Result)(nil), "service.Result")
	proto.RegisterType((*Request)(nil), "service.Request")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcd, 0x4e, 0x1b, 0x3b,
	0x14, 0xc7, 0x67, 0x2e, 0x84, 0x24, 0x27, 0xe1, 0xcb, 0x5c, 0xd0, 0x88, 0x2b, 0xf9, 0x72, 0x73,
	0x5b, 0x89, 0x0a, 0x89, 0x56, 0x7c, 0x54, 0x2d, 0x6a, 0x2b, 0xc1, 0x2a, 0x91, 0x40, 0xa5, 0xa6,
	0x5d, 0x47, 0x43, 0xc6, 0x50, 0x0b, 0x64, 0x4f, 0x8e, 0x3d, 0x48, 0xec, 0xfa, 0x08, 0x55, 0x9f,
	0xa2, 0x8f, 0xd1, 0x65, 0x77, 0x65, 0xc9, 0xb2, 0x0c, 0x9b, 0x2e, 0x79, 0x84, 0x6a, 0x3c, 0x1f,
	0x4c, 0x02, 0x45, 0xd9, 0x25, 0xc7, 0xff, 0xdf, 0x1c, 0xfb, 0xe7, 0x23, 0x03, 0x1c, 0x63, 0xd8,
	0x5b, 0x0d, 0x51, 0x19, 0x45, 0xaa, 0x9a, 0xe3, 0x99, 0xe8, 0xf1, 0xc5, 0x19, 0x6d, 0x30, 0xea,
	0x99, 0x08, 0xb9, 0x4e, 0x97, 0x5a, 0x27, 0x00, 0x4c, 0xe8, 0x93, 0x03, 0x8e, 0x67, 0x1c, 0xc9,
	0x3f, 0x50, 0x3f, 0x44, 0x75, 0xc2, 0xb1, 0x2b, 0x02, 0xcf, 0x5d, 0x72, 0x97, 0xeb, 0xac, 0x96,
	0x16, 0x3a, 0x01, 0xf9, 0x17, 0x1a, 0xda, 0xc6, 0xba, 0x7e, 0x10, 0xa0, 0xf7, 0x97, 0x5d, 0x86,
	0xb4, 0xb4, 0x1d, 0x04, 0x58, 0x0a, 0x84, 0x0a, 0x8d, 0x37, 0xb6, 0xe4, 0x2e, 0x57, 0xf2, 0xc0,
	0xbe, 0x42, 0xd3, 0xda, 0x84, 0x66, 0x47, 0x9e, 0x71, 0x6d, 0x14, 0xee, 0x0a, 0x6d, 0xc8, 0x63,
	0x18, 0x0f, 0x7c, 0xe3, 0x7b, 0xee, 0xd2, 0xd8, 0x72, 0x63, 0x6d, 0x76, 0x35, 0xdb, 0xe6, 0x6a,
	0x1e, 0x62, 0x76, 0xb9, 0xb5, 0x0e, 0x8d, 0xed, 0x5e, 0x4f, 0x45, 0xd2, 0x58, 0xea, 0xd1, 0x00,
	0x35, 0x53, 0x50, 0x59, 0x26, 0x83, 0x36, 0xa1, 0xb9, 0xaf, 0xb4, 0x30, 0x42, 0xc9, 0x07, 0x7b,
	0xe5, 0xa1, 0x0c, 0xfb, 0x32, 0x06, 0x13, 0x8c, 0xeb, 0xe8, 0xd4, 0x90, 0x79, 0x98, 0x40, 0xde,
	0xcf, 0x4d, 0x54, 0x58, 0x05, 0x79, 0xbf, 0x13, 0x90, 0x15, 0xa8, 0xa1, 0x0e, 0xbb, 0x42, 0x1e,
	0x29, 0xeb, 0xa0, 0xbc, 0x05, 0xa6, 0xc3, 0x8e, 0x3c, 0x52, 0xac, 0x8a, 0xe9, 0x0f, 0xf2, 0x3f,
	0x34, 0xfd, 0x50, 0x74, 0x45, 0xc0, 0xa5, 0x11, 0xe6, 0xdc, 0x83, 0x44, 0x5a, 0xdb, 0x61, 0x0d,
	0x3f, 0x14, 0x9d, 0xac, 0x48, 0x9e, 0x03, 0x44, 0x9a, 0x63, 0xf7, 0x54, 0x1d, 0x0b, 0xe9, 0x35,
	0xec, 0x37, 0xe7, 0xcb, 0xdf, 0xfc, 0xa0, 0x39, 0xee, 0x26, 0x8b, 0x6d, 0x87, 0xd5, 0xa3, 0xfc,
	0x0f, 0x79, 0x09, 0x8d, 0x9c, 0x53, 0x91, 0xf1, 0x9a, 0x16, 0x5c, 0xb8, 0x07, 0x54, 0x91, 0x69,
	0x3b, 0x0c, 0xa2, 0xe2, 0x1f, 0xd9, 0x84, 0xba, 0xc8, 0x24, 0x6b, 0x6f, 0x72, 0xa8, 0x63, 0xf9,
	0x8e, 0x92, 0x8e, 0x45, 0x92, 0xac, 0x41, 0xcd, 0x4f, 0x2d, 0x6b, 0x6f, 0xca, 0x52, 0x7f, 0x0f,
	0xeb, 0xcf, 0xa0, 0x22, 0x97, 0xb4, 0x0a, 0x33, 0xc7, 0xda, 0x9b, 0x1e, 0x6a, 0x55, 0xbe, 0xa2,
	0xa4, 0x55, 0x91, 0xdc, 0x01, 0xa8, 0x21, 0xd7, 0xa1, 0x92, 0x9a, 0xb7, 0xbe, 0xb9, 0x50, 0x65,
	0xbc, 0x1f, 0x71, 0x6d, 0xc8, 0x7f, 0x43, 0x46, 0xd3, 0x29, 0x1d, 0xf0, 0xb9, 0x02, 0x95, 0x23,
	0x54, 0xd2, 0x64, 0x2a, 0xe7, 0x6e, 0x8d, 0x14, 0x93, 0xde, 0x76, 0x58, 0x9a, 0x21, 0x4f, 0xa0,
	0x92, 0x7a, 0x4f, 0xf5, 0xcd, 0x0e, 0x84, 0x13, 0x7f, 0x49, 0xd4, 0x26, 0xc8, 0x53, 0xa8, 0xe5,
	0x2a, 0x32, 0x67, 0x77, 0x47, 0x36, 0x39, 0x7a, 0x1e, 0xda, 0xa9, 0x43, 0x15, 0xd3, 0x6d, 0xaf,
	0xfd, 0x18, 0x87, 0x26, 0x53, 0x1f, 0x95, 0xdc, 0x53, 0x52, 0x18, 0x85, 0x64, 0x05, 0xc6, 0x3b,
	0x52, 0x18, 0x52, 0x1a, 0x9e, 0x34, 0xba, 0x38, 0x5d, 0xaa, 0x24, 0x83, 0xd8, 0x72, 0xc8, 0x3a,
	0x34, 0x19, 0xef, 0x17, 0x63, 0x30, 0x1a, 0xb4, 0x01, 0x93, 0xb7, 0x50, 0x72, 0xe9, 0x23, 0x51,
	0xaf, 0x60, 0x9e, 0xf1, 0xfe, 0x3b, 0x3c, 0xcf, 0x36, 0xba, 0x9d, 0xdf, 0xe3, 0x48, 0xf4, 0x16,
	0xcc, 0xa5, 0x74, 0xee, 0x63, 0x4f, 0x49, 0x7e, 0x3e, 0x1a, 0xfb, 0x1a, 0x16, 0x06, 0xd9, 0x7c,
	0x38, 0x46, 0xc3, 0x5f, 0xc0, 0xcc, 0x41, 0x74, 0x98, 0xb3, 0x6f, 0x31, 0xe0, 0x78, 0x0f, 0x38,
	0x55, 0x54, 0x6c, 0xa2, 0xe5, 0x3c, 0x73, 0x87, 0xc8, 0xf7, 0xe8, 0x07, 0xfc, 0x41, 0xd2, 0x26,
	0x2c, 0xb9, 0x35, 0x40, 0xfe, 0xe9, 0xac, 0x77, 0x9e, 0x28, 0xcb, 0xbe, 0x81, 0xb9, 0x12, 0xfb,
	0xc0, 0x59, 0xef, 0xbe, 0x55, 0x09, 0xbf, 0xb3, 0x71, 0x71, 0x45, 0x9d, 0xcb, 0x2b, 0xea, 0xdc,
	0x5c, 0x51, 0xf7, 0x53, 0x4c, 0xdd, 0xaf, 0x31, 0x75, 0xbf, 0xc7, 0xd4, 0xbd, 0x88, 0xa9, 0xfb,
	0x33, 0xa6, 0xee, 0xaf, 0x98, 0x3a, 0x37, 0x31, 0x75, 0x3f, 0x5f, 0x53, 0xe7, 0xe2, 0x9a, 0x3a,
	0x97, 0xd7, 0xd4, 0x39, 0x9c, 0xb0, 0xcf, 0xfe, 0xfa, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f,
	0xe8, 0x7c, 0xba, 0x1f, 0x06, 0x00, 0x00,
}

func (this *RiskServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RiskServer)
	if !ok {
		that2, ok := that.(RiskServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrokerId != that1.BrokerId {
		return false
	}
	if this.ServerAddr != that1.ServerAddr {
		return false
	}
	if this.ServerPort != that1.ServerPort {
		return false
	}
	return true
}
func (this *InvestorList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InvestorList)
	if !ok {
		that2, ok := that.(InvestorList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *AccountList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountList)
	if !ok {
		that2, ok := that.(AccountList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *PositionList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PositionList)
	if !ok {
		that2, ok := that.(PositionList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result)
	if !ok {
		that2, ok := that.(Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReqId != that1.ReqId {
		return false
	}
	if !this.RspInfo.Equal(that1.RspInfo) {
		return false
	}
	if that1.Response == nil {
		if this.Response != nil {
			return false
		}
	} else if this.Response == nil {
		return false
	} else if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *Result_ApiIdentity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result_ApiIdentity)
	if !ok {
		that2, ok := that.(Result_ApiIdentity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiIdentity != that1.ApiIdentity {
		return false
	}
	return true
}
func (this *Result_UserLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result_UserLogin)
	if !ok {
		that2, ok := that.(Result_UserLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserLogin.Equal(that1.UserLogin) {
		return false
	}
	return true
}
func (this *Result_UserLogout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result_UserLogout)
	if !ok {
		that2, ok := that.(Result_UserLogout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserLogout.Equal(that1.UserLogout) {
		return false
	}
	return true
}
func (this *Result_Investors) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result_Investors)
	if !ok {
		that2, ok := that.(Result_Investors)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Investors.Equal(that1.Investors) {
		return false
	}
	return true
}
func (this *Result_Accounts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result_Accounts)
	if !ok {
		that2, ok := that.(Result_Accounts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Accounts.Equal(that1.Accounts) {
		return false
	}
	return true
}
func (this *Result_Positions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result_Positions)
	if !ok {
		that2, ok := that.(Result_Positions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Positions.Equal(that1.Positions) {
		return false
	}
	return true
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiIdentity != that1.ApiIdentity {
		return false
	}
	if that1.Request == nil {
		if this.Request != nil {
			return false
		}
	} else if this.Request == nil {
		return false
	} else if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *Request_Front) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Front)
	if !ok {
		that2, ok := that.(Request_Front)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Front.Equal(that1.Front) {
		return false
	}
	return true
}
func (this *Request_Login) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Login)
	if !ok {
		that2, ok := that.(Request_Login)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Login.Equal(that1.Login) {
		return false
	}
	return true
}
func (this *Request_Investor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Investor)
	if !ok {
		that2, ok := that.(Request_Investor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Investor.Equal(that1.Investor) {
		return false
	}
	return true
}
func (this *RiskServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&service.RiskServer{")
	s = append(s, "BrokerId: "+fmt.Sprintf("%#v", this.BrokerId)+",\n")
	s = append(s, "ServerAddr: "+fmt.Sprintf("%#v", this.ServerAddr)+",\n")
	s = append(s, "ServerPort: "+fmt.Sprintf("%#v", this.ServerPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvestorList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.InvestorList{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.AccountList{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PositionList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.PositionList{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&service.Result{")
	s = append(s, "ReqId: "+fmt.Sprintf("%#v", this.ReqId)+",\n")
	if this.RspInfo != nil {
		s = append(s, "RspInfo: "+fmt.Sprintf("%#v", this.RspInfo)+",\n")
	}
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Result_ApiIdentity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Result_ApiIdentity{` +
		`ApiIdentity:` + fmt.Sprintf("%#v", this.ApiIdentity) + `}`}, ", ")
	return s
}
func (this *Result_UserLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Result_UserLogin{` +
		`UserLogin:` + fmt.Sprintf("%#v", this.UserLogin) + `}`}, ", ")
	return s
}
func (this *Result_UserLogout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Result_UserLogout{` +
		`UserLogout:` + fmt.Sprintf("%#v", this.UserLogout) + `}`}, ", ")
	return s
}
func (this *Result_Investors) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Result_Investors{` +
		`Investors:` + fmt.Sprintf("%#v", this.Investors) + `}`}, ", ")
	return s
}
func (this *Result_Accounts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Result_Accounts{` +
		`Accounts:` + fmt.Sprintf("%#v", this.Accounts) + `}`}, ", ")
	return s
}
func (this *Result_Positions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Result_Positions{` +
		`Positions:` + fmt.Sprintf("%#v", this.Positions) + `}`}, ", ")
	return s
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&service.Request{")
	s = append(s, "ApiIdentity: "+fmt.Sprintf("%#v", this.ApiIdentity)+",\n")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Request_Front) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Request_Front{` +
		`Front:` + fmt.Sprintf("%#v", this.Front) + `}`}, ", ")
	return s
}
func (this *Request_Login) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Request_Login{` +
		`Login:` + fmt.Sprintf("%#v", this.Login) + `}`}, ", ")
	return s
}
func (this *Request_Investor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Request_Investor{` +
		`Investor:` + fmt.Sprintf("%#v", this.Investor) + `}`}, ", ")
	return s
}
func valueToGoStringGrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RohonMonitorClient is the client API for RohonMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RohonMonitorClient interface {
	Init(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	ReqUserLogin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	ReqUserLogout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	ReqQryMonitorAccounts(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	ReqQryInvestorMoney(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	ReqQryInvestorPosition(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	SubInvestorOrder(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorOrderClient, error)
	SubInvestorTrade(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorTradeClient, error)
	SubInvestorMoney(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorMoneyClient, error)
	SubInvestorPosition(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorPositionClient, error)
}

type rohonMonitorClient struct {
	cc *grpc.ClientConn
}

func NewRohonMonitorClient(cc *grpc.ClientConn) RohonMonitorClient {
	return &rohonMonitorClient{cc}
}

func (c *rohonMonitorClient) Init(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.RohonMonitor/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rohonMonitorClient) ReqUserLogin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.RohonMonitor/ReqUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rohonMonitorClient) ReqUserLogout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.RohonMonitor/ReqUserLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rohonMonitorClient) ReqQryMonitorAccounts(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.RohonMonitor/ReqQryMonitorAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rohonMonitorClient) ReqQryInvestorMoney(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.RohonMonitor/ReqQryInvestorMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rohonMonitorClient) ReqQryInvestorPosition(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.RohonMonitor/ReqQryInvestorPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rohonMonitorClient) SubInvestorOrder(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RohonMonitor_serviceDesc.Streams[0], "/service.RohonMonitor/SubInvestorOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &rohonMonitorSubInvestorOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RohonMonitor_SubInvestorOrderClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type rohonMonitorSubInvestorOrderClient struct {
	grpc.ClientStream
}

func (x *rohonMonitorSubInvestorOrderClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rohonMonitorClient) SubInvestorTrade(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorTradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RohonMonitor_serviceDesc.Streams[1], "/service.RohonMonitor/SubInvestorTrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &rohonMonitorSubInvestorTradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RohonMonitor_SubInvestorTradeClient interface {
	Recv() (*Trade, error)
	grpc.ClientStream
}

type rohonMonitorSubInvestorTradeClient struct {
	grpc.ClientStream
}

func (x *rohonMonitorSubInvestorTradeClient) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rohonMonitorClient) SubInvestorMoney(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorMoneyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RohonMonitor_serviceDesc.Streams[2], "/service.RohonMonitor/SubInvestorMoney", opts...)
	if err != nil {
		return nil, err
	}
	x := &rohonMonitorSubInvestorMoneyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RohonMonitor_SubInvestorMoneyClient interface {
	Recv() (*Account, error)
	grpc.ClientStream
}

type rohonMonitorSubInvestorMoneyClient struct {
	grpc.ClientStream
}

func (x *rohonMonitorSubInvestorMoneyClient) Recv() (*Account, error) {
	m := new(Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rohonMonitorClient) SubInvestorPosition(ctx context.Context, in *Request, opts ...grpc.CallOption) (RohonMonitor_SubInvestorPositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RohonMonitor_serviceDesc.Streams[3], "/service.RohonMonitor/SubInvestorPosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &rohonMonitorSubInvestorPositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RohonMonitor_SubInvestorPositionClient interface {
	Recv() (*Position, error)
	grpc.ClientStream
}

type rohonMonitorSubInvestorPositionClient struct {
	grpc.ClientStream
}

func (x *rohonMonitorSubInvestorPositionClient) Recv() (*Position, error) {
	m := new(Position)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RohonMonitorServer is the server API for RohonMonitor service.
type RohonMonitorServer interface {
	Init(context.Context, *Request) (*Result, error)
	ReqUserLogin(context.Context, *Request) (*Result, error)
	ReqUserLogout(context.Context, *Request) (*Result, error)
	ReqQryMonitorAccounts(context.Context, *Request) (*Result, error)
	ReqQryInvestorMoney(context.Context, *Request) (*Result, error)
	ReqQryInvestorPosition(context.Context, *Request) (*Result, error)
	SubInvestorOrder(*Request, RohonMonitor_SubInvestorOrderServer) error
	SubInvestorTrade(*Request, RohonMonitor_SubInvestorTradeServer) error
	SubInvestorMoney(*Request, RohonMonitor_SubInvestorMoneyServer) error
	SubInvestorPosition(*Request, RohonMonitor_SubInvestorPositionServer) error
}

// UnimplementedRohonMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedRohonMonitorServer struct {
}

func (*UnimplementedRohonMonitorServer) Init(ctx context.Context, req *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedRohonMonitorServer) ReqUserLogin(ctx context.Context, req *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqUserLogin not implemented")
}
func (*UnimplementedRohonMonitorServer) ReqUserLogout(ctx context.Context, req *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqUserLogout not implemented")
}
func (*UnimplementedRohonMonitorServer) ReqQryMonitorAccounts(ctx context.Context, req *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqQryMonitorAccounts not implemented")
}
func (*UnimplementedRohonMonitorServer) ReqQryInvestorMoney(ctx context.Context, req *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqQryInvestorMoney not implemented")
}
func (*UnimplementedRohonMonitorServer) ReqQryInvestorPosition(ctx context.Context, req *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqQryInvestorPosition not implemented")
}
func (*UnimplementedRohonMonitorServer) SubInvestorOrder(req *Request, srv RohonMonitor_SubInvestorOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method SubInvestorOrder not implemented")
}
func (*UnimplementedRohonMonitorServer) SubInvestorTrade(req *Request, srv RohonMonitor_SubInvestorTradeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubInvestorTrade not implemented")
}
func (*UnimplementedRohonMonitorServer) SubInvestorMoney(req *Request, srv RohonMonitor_SubInvestorMoneyServer) error {
	return status.Errorf(codes.Unimplemented, "method SubInvestorMoney not implemented")
}
func (*UnimplementedRohonMonitorServer) SubInvestorPosition(req *Request, srv RohonMonitor_SubInvestorPositionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubInvestorPosition not implemented")
}

func RegisterRohonMonitorServer(s *grpc.Server, srv RohonMonitorServer) {
	s.RegisterService(&_RohonMonitor_serviceDesc, srv)
}

func _RohonMonitor_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RohonMonitorServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RohonMonitor/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RohonMonitorServer).Init(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RohonMonitor_ReqUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RohonMonitorServer).ReqUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RohonMonitor/ReqUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RohonMonitorServer).ReqUserLogin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RohonMonitor_ReqUserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RohonMonitorServer).ReqUserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RohonMonitor/ReqUserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RohonMonitorServer).ReqUserLogout(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RohonMonitor_ReqQryMonitorAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RohonMonitorServer).ReqQryMonitorAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RohonMonitor/ReqQryMonitorAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RohonMonitorServer).ReqQryMonitorAccounts(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RohonMonitor_ReqQryInvestorMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RohonMonitorServer).ReqQryInvestorMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RohonMonitor/ReqQryInvestorMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RohonMonitorServer).ReqQryInvestorMoney(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RohonMonitor_ReqQryInvestorPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RohonMonitorServer).ReqQryInvestorPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RohonMonitor/ReqQryInvestorPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RohonMonitorServer).ReqQryInvestorPosition(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RohonMonitor_SubInvestorOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RohonMonitorServer).SubInvestorOrder(m, &rohonMonitorSubInvestorOrderServer{stream})
}

type RohonMonitor_SubInvestorOrderServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type rohonMonitorSubInvestorOrderServer struct {
	grpc.ServerStream
}

func (x *rohonMonitorSubInvestorOrderServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _RohonMonitor_SubInvestorTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RohonMonitorServer).SubInvestorTrade(m, &rohonMonitorSubInvestorTradeServer{stream})
}

type RohonMonitor_SubInvestorTradeServer interface {
	Send(*Trade) error
	grpc.ServerStream
}

type rohonMonitorSubInvestorTradeServer struct {
	grpc.ServerStream
}

func (x *rohonMonitorSubInvestorTradeServer) Send(m *Trade) error {
	return x.ServerStream.SendMsg(m)
}

func _RohonMonitor_SubInvestorMoney_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RohonMonitorServer).SubInvestorMoney(m, &rohonMonitorSubInvestorMoneyServer{stream})
}

type RohonMonitor_SubInvestorMoneyServer interface {
	Send(*Account) error
	grpc.ServerStream
}

type rohonMonitorSubInvestorMoneyServer struct {
	grpc.ServerStream
}

func (x *rohonMonitorSubInvestorMoneyServer) Send(m *Account) error {
	return x.ServerStream.SendMsg(m)
}

func _RohonMonitor_SubInvestorPosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RohonMonitorServer).SubInvestorPosition(m, &rohonMonitorSubInvestorPositionServer{stream})
}

type RohonMonitor_SubInvestorPositionServer interface {
	Send(*Position) error
	grpc.ServerStream
}

type rohonMonitorSubInvestorPositionServer struct {
	grpc.ServerStream
}

func (x *rohonMonitorSubInvestorPositionServer) Send(m *Position) error {
	return x.ServerStream.SendMsg(m)
}

var _RohonMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.RohonMonitor",
	HandlerType: (*RohonMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _RohonMonitor_Init_Handler,
		},
		{
			MethodName: "ReqUserLogin",
			Handler:    _RohonMonitor_ReqUserLogin_Handler,
		},
		{
			MethodName: "ReqUserLogout",
			Handler:    _RohonMonitor_ReqUserLogout_Handler,
		},
		{
			MethodName: "ReqQryMonitorAccounts",
			Handler:    _RohonMonitor_ReqQryMonitorAccounts_Handler,
		},
		{
			MethodName: "ReqQryInvestorMoney",
			Handler:    _RohonMonitor_ReqQryInvestorMoney_Handler,
		},
		{
			MethodName: "ReqQryInvestorPosition",
			Handler:    _RohonMonitor_ReqQryInvestorPosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubInvestorOrder",
			Handler:       _RohonMonitor_SubInvestorOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubInvestorTrade",
			Handler:       _RohonMonitor_SubInvestorTrade_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubInvestorMoney",
			Handler:       _RohonMonitor_SubInvestorMoney_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubInvestorPosition",
			Handler:       _RohonMonitor_SubInvestorPosition_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

func (m *RiskServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiskServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RiskServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerPort != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.ServerPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrokerId) > 0 {
		i -= len(m.BrokerId)
		copy(dAtA[i:], m.BrokerId)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.BrokerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvestorList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvestorList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvestorList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PositionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RspInfo != nil {
		{
			size, err := m.RspInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ReqId != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Result_ApiIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result_ApiIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ApiIdentity)
	copy(dAtA[i:], m.ApiIdentity)
	i = encodeVarintGrpc(dAtA, i, uint64(len(m.ApiIdentity)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *Result_UserLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result_UserLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserLogin != nil {
		{
			size, err := m.UserLogin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Result_UserLogout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result_UserLogout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserLogout != nil {
		{
			size, err := m.UserLogout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Result_Investors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result_Investors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Investors != nil {
		{
			size, err := m.Investors.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Result_Accounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result_Accounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Accounts != nil {
		{
			size, err := m.Accounts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *Result_Positions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result_Positions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Positions != nil {
		{
			size, err := m.Positions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ApiIdentity) > 0 {
		i -= len(m.ApiIdentity)
		copy(dAtA[i:], m.ApiIdentity)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.ApiIdentity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request_Front) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_Front) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Front != nil {
		{
			size, err := m.Front.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Request_Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Login != nil {
		{
			size, err := m.Login.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Request_Investor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_Investor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Investor != nil {
		{
			size, err := m.Investor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func encodeVarintGrpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RiskServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrokerId)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.ServerPort != 0 {
		n += 1 + sovGrpc(uint64(m.ServerPort))
	}
	return n
}

func (m *InvestorList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *AccountList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *PositionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqId != 0 {
		n += 1 + sovGrpc(uint64(m.ReqId))
	}
	if m.RspInfo != nil {
		l = m.RspInfo.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *Result_ApiIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiIdentity)
	n += 1 + l + sovGrpc(uint64(l))
	return n
}
func (m *Result_UserLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserLogin != nil {
		l = m.UserLogin.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}
func (m *Result_UserLogout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserLogout != nil {
		l = m.UserLogout.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}
func (m *Result_Investors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Investors != nil {
		l = m.Investors.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}
func (m *Result_Accounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accounts != nil {
		l = m.Accounts.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}
func (m *Result_Positions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Positions != nil {
		l = m.Positions.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiIdentity)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *Request_Front) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Front != nil {
		l = m.Front.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}
func (m *Request_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Login != nil {
		l = m.Login.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}
func (m *Request_Investor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Investor != nil {
		l = m.Investor.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func sovGrpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrpc(x uint64) (n int) {
	return sovGrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RiskServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RiskServer{`,
		`BrokerId:` + fmt.Sprintf("%v", this.BrokerId) + `,`,
		`ServerAddr:` + fmt.Sprintf("%v", this.ServerAddr) + `,`,
		`ServerPort:` + fmt.Sprintf("%v", this.ServerPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvestorList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*Investor{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(fmt.Sprintf("%v", f), "Investor", "Investor", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&InvestorList{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*Account{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(fmt.Sprintf("%v", f), "Account", "Account", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&AccountList{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *PositionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*Position{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(fmt.Sprintf("%v", f), "Position", "Position", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&PositionList{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result{`,
		`ReqId:` + fmt.Sprintf("%v", this.ReqId) + `,`,
		`RspInfo:` + strings.Replace(fmt.Sprintf("%v", this.RspInfo), "RspInfo", "RspInfo", 1) + `,`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result_ApiIdentity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result_ApiIdentity{`,
		`ApiIdentity:` + fmt.Sprintf("%v", this.ApiIdentity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result_UserLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result_UserLogin{`,
		`UserLogin:` + strings.Replace(fmt.Sprintf("%v", this.UserLogin), "RspUserLogin", "RspUserLogin", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result_UserLogout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result_UserLogout{`,
		`UserLogout:` + strings.Replace(fmt.Sprintf("%v", this.UserLogout), "RspUserLogout", "RspUserLogout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result_Investors) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result_Investors{`,
		`Investors:` + strings.Replace(fmt.Sprintf("%v", this.Investors), "InvestorList", "InvestorList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result_Accounts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result_Accounts{`,
		`Accounts:` + strings.Replace(fmt.Sprintf("%v", this.Accounts), "AccountList", "AccountList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result_Positions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result_Positions{`,
		`Positions:` + strings.Replace(fmt.Sprintf("%v", this.Positions), "PositionList", "PositionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`ApiIdentity:` + fmt.Sprintf("%v", this.ApiIdentity) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Front) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Front{`,
		`Front:` + strings.Replace(fmt.Sprintf("%v", this.Front), "RiskServer", "RiskServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Login) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Login{`,
		`Login:` + strings.Replace(fmt.Sprintf("%v", this.Login), "RiskUser", "RiskUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Investor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Investor{`,
		`Investor:` + strings.Replace(fmt.Sprintf("%v", this.Investor), "Investor", "Investor", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RiskServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiskServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiskServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvestorList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvestorList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvestorList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Investor{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Account{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Position{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RspInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RspInfo == nil {
				m.RspInfo = &RspInfo{}
			}
			if err := m.RspInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = &Result_ApiIdentity{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLogin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RspUserLogin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Result_UserLogin{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLogout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RspUserLogout{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Result_UserLogout{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Investors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InvestorList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Result_Investors{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccountList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Result_Accounts{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PositionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Result_Positions{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Front", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RiskServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Front{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RiskUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Login{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Investor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Investor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Investor{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGrpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGrpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGrpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGrpc = fmt.Errorf("proto: unexpected end of group")
)
